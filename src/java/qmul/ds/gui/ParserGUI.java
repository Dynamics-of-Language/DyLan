/*******************************************************************************
 * Copyright (c) 2001, 2010 Matthew Purver
 * All Rights Reserved.  Use is subject to license terms.
 *
 * See the file "LICENSE" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *******************************************************************************/

package qmul.ds.gui;

import javax.swing.JFrame;

import org.apache.log4j.Logger;

import qmul.ds.DSParser;
import qmul.ds.dag.UtteredWord;
/**
 * 
 * This is the Graphical User Interface for the DyLan parser/generator.
 * 
 * @author Matt, Arash
 *
 */

@SuppressWarnings("serial")
public class ParserGUI extends JFrame {

	private static Logger logger = Logger.getLogger(ParserGUI.class);

	private ParserPanel parserPanel;
	
	boolean ready=false;

	/**
	 * Creates a new Parser Frame using {@link #Parser(String, String)} with both arguments being <code>null</code>.
	 */
	public ParserGUI() {
		this(null, null);
		ready=true;
	}

	/**
	 * Creates new Parser Frame.
	 * 
	 * @param parserFilename
	 *            path to the serialized parser to load during initialization
	 * @param dataFilename
	 *            path to the data file to load during initialization
	 */
	public ParserGUI(String parserFilename, String dataFilename) {
		this(parserFilename, dataFilename, false);
		
	}

	/**
	 * Creates new Parser Frame.
	 * 
	 * @param parserFilename
	 *            path to the serialized parser to load during initialization
	 * @param dataFilename
	 *            path to the data file to load during initialization
	 * @param applet
	 *            true if we are running as an applet and need to avoid file permission issues
	 */
	public ParserGUI(String parserFilename, String dataFilename, boolean applet) {
		initComponents(applet);

		parserPanel = new ParserPanel(applet, this);
		getContentPane().add("Center", parserPanel);
		if (parserFilename != null) {
			parserPanel.loadParser(parserFilename);
		}
		if (dataFilename != null) {
			parserPanel.loadFile(dataFilename);
		}

		pack();
		ready=parserPanel.isReady();
	}
	
	public boolean isReady()
	{
		return parserPanel.isReady();
	}

	/**
	 * @return the parserPanel
	 */
	public ParserPanel getParserPanel() {
		return parserPanel;
	}
	
	public DSParser getParser() {
		
		return parserPanel.getParser();
	}
	
	

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	private void initComponents(boolean applet)// GEN-BEGIN:initComponents
	{
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		loadDataItem = new javax.swing.JMenuItem();
		loadParserItem = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		exitItem = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		eng2001Item = new javax.swing.JCheckBoxMenuItem();
		jap2001Item = new javax.swing.JCheckBoxMenuItem();
		eng2005Item = new javax.swing.JCheckBoxMenuItem();
		eng2009Item = new javax.swing.JCheckBoxMenuItem();
		engTTRItem = new javax.swing.JCheckBoxMenuItem();

		setTitle("Dylan");
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		jMenu1.setText("File");
		loadDataItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O,
				java.awt.event.InputEvent.ALT_MASK));
		loadDataItem.setMnemonic('o');
		loadDataItem.setText("Load Corpus File");
		loadDataItem.setToolTipText("Load a corpus data file.");
		loadDataItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadDataItemActionPerformed(evt);
			}
		});
		loadDataItem.setEnabled(!applet);

		jMenu1.add(loadDataItem);
		loadParserItem.setText("Load Lexicon");
		loadParserItem.setToolTipText("Load parser lexicon/grammar definitions");
		loadParserItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadParserItemActionPerformed(evt);
			}
		});
		loadParserItem.setEnabled(true);

		jMenu1.add(loadParserItem);
		jMenu1.add(jSeparator1);
		exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X,
				java.awt.event.InputEvent.ALT_MASK));
		exitItem.setMnemonic('x');
		exitItem.setText("Exit");
		exitItem.setToolTipText("Exits the program.");
		exitItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitItemActionPerformed(evt);
			}
		});

		jMenu1.add(exitItem);
		jMenuBar1.add(jMenu1);
		jMenu2.setText("Lexicon");
		// eng2001Item.setSelected(true);
		eng2001Item.setText("English 2001");
		eng2001Item.setToolTipText("English as per the 2001 DS book.");
		eng2001Item.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				eng2001ItemActionPerformed(evt);
			}
		});

		jMenu2.add(eng2001Item);
		jap2001Item.setText("Japanese 2001");
		jap2001Item.setToolTipText("Japanese as per the 2001 DS book.");
		jap2001Item.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jap2001ItemActionPerformed(evt);
			}
		});

		jMenu2.add(jap2001Item);
		eng2005Item.setText("English 2005");
		eng2005Item.setToolTipText("English as per the 2005 DS book.");
		eng2005Item.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				eng2005ItemActionPerformed(evt);
			}
		});

		jMenu2.add(eng2005Item);
		eng2009Item.setText("English 2009");
		eng2009Item.setToolTipText("English as per the 2009 DynDial project.");
		eng2009Item.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				eng2009ItemActionPerformed(evt);
			}
		});

		jMenu2.add(eng2009Item);
		engTTRItem.setText("English TTR");
		engTTRItem.setToolTipText("English in a TTR stylee.");
		engTTRItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				engTTRItemActionPerformed(evt);
			}
		});

		jMenu2.add(engTTRItem);
		jMenuBar1.add(jMenu2);
		setJMenuBar(jMenuBar1);

		pack();
	}// GEN-END:initComponents

	private void eng2001ItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_untokEngItemActionPerformed
	{// GEN-HEADEREND:event_untokEngItemActionPerformed
		eng2001Item.setSelected(true);
		jap2001Item.setSelected(false);
		eng2005Item.setSelected(false);
		eng2009Item.setSelected(false);
		parserPanel.setLanguage(ParserPanel.ENGLISH);
		parserPanel.loadParser(ParserPanel.ENGLISH_2001_URL);
	}// GEN-LAST:event_untokEngItemActionPerformed

	private void jap2001ItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_tokOtherItemActionPerformed
	{// GEN-HEADEREND:event_tokOtherItemActionPerformed
		eng2001Item.setSelected(false);
		jap2001Item.setSelected(true);
		eng2005Item.setSelected(false);
		eng2009Item.setSelected(false);
		engTTRItem.setSelected(false);
		parserPanel.setLanguage(ParserPanel.JAPANESE);
		parserPanel.loadParser(ParserPanel.JAPANESE_2001_URL);
	}// GEN-LAST:event_tokOtherItemActionPerformed

	private void eng2005ItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_tokOtherItemActionPerformed
	{// GEN-HEADEREND:event_tokOtherItemActionPerformed
		eng2001Item.setSelected(false);
		jap2001Item.setSelected(false);
		eng2005Item.setSelected(true);
		eng2009Item.setSelected(false);
		parserPanel.setLanguage(ParserPanel.ENGLISH);
		parserPanel.loadParser(ParserPanel.ENGLISH_2005_URL);
	}// GEN-LAST:event_tokOtherItemActionPerformed

	private void eng2009ItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_tokOtherItemActionPerformed
	{// GEN-HEADEREND:event_tokOtherItemActionPerformed
		eng2001Item.setSelected(false);
		jap2001Item.setSelected(false);
		eng2005Item.setSelected(false);
		eng2009Item.setSelected(true);
		parserPanel.setLanguage(ParserPanel.ENGLISH);
		parserPanel.loadParser(ParserPanel.ENGLISH_2009_URL);
	}// GEN-LAST:event_tokOtherItemActionPerformed

	private void engTTRItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_untokEngItemActionPerformed
	{// GEN-HEADEREND:event_untokEngItemActionPerformed
		eng2001Item.setSelected(false);
		jap2001Item.setSelected(false);
		eng2005Item.setSelected(false);
		eng2009Item.setSelected(false);
		engTTRItem.setSelected(true);
		parserPanel.setLanguage(ParserPanel.ENGLISH);
		parserPanel.loadParser(ParserPanel.ENGLISH_TTR_URL);
	}// GEN-LAST:event_untokEngItemActionPerformed

	private void exitItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_exitItemActionPerformed
	{// GEN-HEADEREND:event_exitItemActionPerformed
		exitForm(null);
	}// GEN-LAST:event_exitItemActionPerformed

	private void loadParserItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_loadParserItemActionPerformed
	{// GEN-HEADEREND:event_loadParserItemActionPerformed
		parserPanel.loadParser();
	}// GEN-LAST:event_loadParserItemActionPerformed

	private void loadDataItemActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_loadDataItemActionPerformed
	{// GEN-HEADEREND:event_loadDataItemActionPerformed
		parserPanel.loadFile();
	}// GEN-LAST:event_loadDataItemActionPerformed

	/**
	 * Exit the Application
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
		this.parserPanel.onClose();
		System.exit(0);
	}// GEN-LAST:event_exitForm

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		edu.stanford.nlp.util.DisabledPreferencesFactory.install();
		String dataFilename = null;
		String parserFilename = null;
		if (args.length > 0) {
			if (args[0].equals("-h")) {
				logger.debug("Usage: java " + ParserPanel.class + " [parserfilename] [textFilename]");
			} else {
				parserFilename = args[0];
				if (args.length > 1) {
					dataFilename = args[1];
				}
			}
		}

		ParserGUI parser = new ParserGUI(parserFilename, dataFilename);
		parser.setVisible(true);
		
//		UtteredWord word=new UtteredWord("this", "A");
//		
//		while(!parser.isReady())
//		{
//			try {
//				Thread.sleep(1000);
//			}catch(InterruptedException e)
//			{
//				e.printStackTrace();
//			}
//		}
//		
//		parser.getParserPanel().parseWord(word);
//		System.out.println("sssssss");
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBoxMenuItem eng2001Item;
	private javax.swing.JCheckBoxMenuItem jap2001Item;
	private javax.swing.JCheckBoxMenuItem eng2005Item;
	private javax.swing.JCheckBoxMenuItem eng2009Item;
	private javax.swing.JCheckBoxMenuItem engTTRItem;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuItem loadParserItem;
	private javax.swing.JMenuItem loadDataItem;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenuItem exitItem;
	private javax.swing.JMenuBar jMenuBar1;
	// End of variables declaration//GEN-END:variables

}
