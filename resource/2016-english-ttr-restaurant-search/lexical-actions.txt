// Lexical actions for English
// as per Dynamics of Conversational Dialogue project, 2009

// Rule metavariables: uppercase rule spec arguments
// Formula metavariables: A,B,C
// Bottom requirement: !


proper(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    IF		</\0\/1>Ex.x
				</\0\/1>(ty(e>t) || ?ty(e>t))
				¬</\0\/1>person(PERSON)
				</\0\/1>person(X)
		THEN	abort
		ELSE	put(person(PERSON))
				put(class(CLASS))
		        put(ty(e))
		        delete(?ty(e))
		        ttrput([x==NAME:e|head==x:e])
ELSE    abort

//*
det_num_postcop(QUANT,PERSON)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
THEN	delete(?Ex.fo(x))
		ttrput(R^(R ++ [x==QUANT:e|p==count(R.head,x):t]))
ELSE	abort
*//


det_num(QUANT,PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    IF		</\0\/1>Ex.x
				</\0\/1>?Ex.fo(x)
				</\0\/1>ty(e>t)
				¬</\0\/1>person(PERSON)
				</\0\/1>person(X)
		THEN	abort
		ELSE	put(person(PERSON))
				put(class(obj))
				make(\/1)
			    go(\/1)
				ttrput(R^(R ++ [head==R.head:e|x==QUANT:e|p==count(head,x):t]))
				put(ty(cn>e))
			    put(!)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(cn))
ELSE	abort

det_num_noun(QUANT,PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    IF		</\0\/1>Ex.x
				</\0\/1>?Ex.fo(x)
				</\0\/1>ty(e>t)
				¬</\0\/1>person(PERSON)
				</\0\/1>person(X)
		THEN	abort
		ELSE	put(person(PERSON))
				put(class(obj))
				make(\/1)
		  		go(\/1)
		       	ttrput(R^(R ++ [head==R.head:e|x==QUANT:e|p==count(head,x):t]))
		        put(ty(cn>e))
		       	put(!)
		       	go(/\1)
		       	make(\/0)
		        go(\/0)
		        put(ty(cn))
		        ttrput([x:e|head==x:e])
ELSE	abort

det_indef(QUANT)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    IF		</\0\/1>Ex.x
				</\0\/1>?Ex.fo(x)
				</\0\/1>ty(e>t)
				¬</\0\/1>person(s3)
				</\0\/1>person(X)
		THEN	abort
		ELSE	put(person(s3))
				put(class(obj))
				make(\/1)
        		go(\/1)
        		ttrput(R^(R ++ [head==R.head:e]))
        		put(ty(cn>e))
        		put(!)
        		go(/\1)
        		make(\/0)
        		go(\/0)
        		put(?ty(cn))
ELSE    abort

//*
this is the version where the definite article copies the subject variable onto the lower, object type e
the problem is that the head comes out wrong. And hard to get tense to work properly without event terms.

det_indef_postcop(QUANT)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        </\1\/0>ty(e)
        </\1\/0>fo(X)
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R2 ++ (R1 ++ [head==R1.head:e])))
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
		make(\/1)
        go(\/1)
        ttrput(R^(R ++ [head==R.head:e]))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
        make(\/0)
        go(\/0)
        put(ty(e))
       	put(fo(X))
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>cn))
ELSE	abort


det_indef_postcop(QUANT)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R2 ++ (R1 ++ [e1==eq:es|p==subj(e1,R2.head):t|p1==obj(e1,R1.head):t|head==e1:es])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
		make(\/1)
        go(\/1)
        ttrput(R^(R ++ [head==R.head:e]))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
        make(\/0)
        go(\/0)
        put(ty(e))
       	ttrput([x1:e|head==x1:e])
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>cn))
ELSE	abort

*//

det_def_postcop(QUANT)
IF		?ty(e>t)
		+BE
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [p2==eq(R1.head,R2.head):t|head==p2:t])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
		make(\/1)
		go(\/1)
		ttrput(R^[r:R | x1==(QUANT, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

demonst(PRED,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([x==PRED:e|head==x:e])
ELSE    abort

det_demonst(PRED,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(s3))	
		make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==PRED(R.head):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

my(PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        Speaker(X)
THEN	make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==of(R.head,X):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

your(QUANT)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        Addressee(X)
THEN    put(person(s3))
		put(class(obj))
		make(\/1)
        go(\/1)
        ttrput(R^(R ++ [head==R.head:e|p==belongs(head,X):t]))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort



mass(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(ty(e))
		delete(?ty(e))
        ttrput([x==NAME:e|head==x:e])
        put(person(PERSON))
        put(class(CLASS))
        put(!)
ELSE    IF		?ty(cn)
		THEN	put(ty(cn))
				delete(?ty(cn))
				ttrput([x==NAME:e|head==x:e])
		ELSE	abort

noun_mod(PRED,PREP)
IF      ?ty(cn)
		¬<\/L>Ex.x
THEN    put(?+eval)
		make(\/L)
        go(\/L)
        put(ty(t))
        ttrput([head:e|x:e|p2==PRED(x):t|p3==PREP(head,x):t])
        put(!)
        go(/\L)
ELSE	abort

//*
noun_mod(PRED,PREP)
IF      ?ty(e>cn)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/L>Ex.x
THEN	put(?+eval)
		make(\/L)
        go(\/L)
        ttrput([head:e|x==PRED:e|p3==PREP(head,x):t])
        put(ty(e>cn))
        go(/\L)
ELSE	abort
//*
//*noun-mod //modifier in the case of a following mass noun. Commented out for now. (it works)
IF		?ty(e)
				¬<\/1>Ex.x
        		¬<\/0>Ex.x
        THEN	make(\/1)
        		go(\/1)
  		        ttrput(R^(R ++ [head==R.head:e]))
 		        put(ty(cn>e))
    	        put(!)
    		    go(/\1)
  		        make(\/0)
  		        go(\/0)
		        put(?ty(cn))
   		        make(\/0)
  		        go(\/0)
  		        put(?ty(e))
  		        go(/\0)
        		make(\/1)
        		go(\/1)
       		    ttrput(R^(R ++ [x==PRED:e|p3==PREP(head,x):t|pred==CLASS(x):cn]))
       		    put(ty(e>cn))
      	 ELSE	abort	
*//





count(PRED,PERSON,CLASS)
IF      ?ty(cn)
THEN    make(\/1)
		go(\/1)
		put(ty(e>cn))
        ttrput(R^(R ++ [pred==PRED(R.head):cn]))
        go(/\1)
        make(\/0)
        go(\/0)
        put(ty(e))
        ttrput([x:e|head==x:e])
ELSE    abort





adj(PRED)
IF      ?ty(cn)
		</\0>?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		¬<\/L>Ex.x
THEN    make(\/1)
        go(\/1)
        ttrput(R^(R ++ [p3==PRED(R.head):t]))
        put(ty(cn>cn))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    IF		?ty(e)
				¬<\/1>Ex.x
        		¬<\/0>Ex.x
        THEN	put(person(s3))
        		make(\/1)
        		go(\/1)
  		        ttrput(R^(R ++ [head==R.head:e]))
 		        put(ty(cn>e))
    	        put(!)
    		    go(/\1)
  		        make(\/0)
  		        go(\/0)
		        put(?ty(cn))
   		        make(\/1)
       			go(\/1)
       			ttrput(R^(R ++ [p3==PRED(R.head):t]))
      		    put(ty(cn>cn))
        		put(!)
        		go(/\1)
        		make(\/0)
        		go(\/0)
        		put(?ty(cn))
      	 ELSE	abort
       		    
        		
		
adj_be(PRED)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
THEN	delete(?Ex.fo(x))
		ttrput(R^(R ++ [e1:es|p==subj(e1,R.head):t|p2==PRED(e1):t|head==e1:es]))
ELSE	abort

//*
this is the version where adjectives predicate over the subject directly (as opposed to an event term)
adj_be(PRED)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
THEN	delete(?Ex.fo(x))
		ttrput(R^(R ++ [p==PRED(R.head):t]))
ELSE	abort
*//


i(PERSON,CLASS)
IF		?ty(e)
		Speaker(X)
		</\0>?ty(t)
THEN	ttrput([x==X:e|head==x:e])
		put(ty(e))
		delete(?ty(e))
		put(person(PERSON))
ELSE	abort


me(PERSON,CLASS)
IF		?ty(e)
		</\0>?ty(t)
THEN	abort
ELSE	IF		?ty(e)
				</\0/\*>?ty(t)
				Speaker(X)
		THEN	ttrput([x==X:e|head==x:e])
				put(ty(e))
				delete(?ty(e))
				put(person(PERSON))
		ELSE	abort


you(PERSON,CLASS)
IF		?ty(e)
		Addressee(X)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    IF		</\0\/1>Ex.x
				</\0\/1>?Ex.fo(x)
				</\0\/1>ty(e>t)
				¬</\0\/1>person(PERSON)
				</\0\/1>person(X)
		THEN	abort
		ELSE	ttrput([x==X:e|head==x:e])
				put(ty(e))
				delete(?ty(e))
				put(person(PERSON))
ELSE	abort




pron_whq_mod(CLASS)
IF		<Y>+Q
THEN	abort
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
				¬<\/0>Ex.x
				¬<\/*>Ex.x
				¬</\L>Ex.x
		THEN	make(\/*)
				go(\/*)
				put(?Ex.tn(x))
				put(?ty(e>t))
				make(\/1)
				go(\/1)
				put(ty(e>(e>t)))
				ttrput(R1^R2^(R1 ++ (R2 ++ [e1:es|p1==subj(e1,R2.head):t|p==CLASS(e1, R1.head):t|head==e1:es])))
				put(!)
				go(/\1)
				make(\/0)
				go(\/0)
				put(ty(e))
				ttrput([x:e|head==x:e])
				put(+Q)
				put(+meta)
		ELSE	abort


pron_whq(CLASS)
IF		<Y>+Q
THEN	abort
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
				¬<\/0>Ex.x
				¬<\/*>Ex.x
				¬</\L>Ex.x
		THEN	make(\/*)
				go(\/*)
				put(?Ex.tn(x))
				put(ty(e))
				ttrput([x:e|head==x:e])
				put(+Q)
				put(+meta)
				put(class(CLASS))
		ELSE	IF		?ty(e)
						Ex.tn(x)
						¬<\/1>Ex.x
						¬<\/0>Ex.x
						¬<\/*>Ex.x
						¬</\L>Ex.x
				THEN	delete(?ty(e))
						put(ty(e))
						ttrput([x:e|head==x:e])
						put(+Q)
						put(+meta)
						put(class(CLASS))
				ELSE	abort

pron_whq_det_count(CLASS)
IF		<Y>+Q
THEN	abort
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
				¬<\/0>Ex.x
				¬<\/*>Ex.x
				¬</\L>Ex.x
		THEN	make(\/*)
				go(\/*)
				put(?Ex.tn(x))
				put(?ty(e))
				put(person(nons3))
				make(\/1)
				go(\/1)
				put(?ty(cn>e))
				make(\/1)
				go(\/1)
				ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==count(R2.head,R1.head):t])))
				put(ty(e>(cn>e)))
				put(!)
				go(/\1)
				make(\/0)
				go(\/0)
				put(ty(e))
				ttrput([x:e|head==x:e])
				put(+Q)
				put(+meta)
				go(/\0)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(cn))
		ELSE	IF		?ty(e)
						¬<\/1>Ex.x
						¬<\/0>Ex.x
						¬<\/*>Ex.x
				THEN	put(person(plur))
						make(\/1)
						go(\/1)
						put(?ty(cn>e))
						make(\/1)
						go(\/1)
						ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==count(R2.head,R1.head):t])))
						put(ty(e>(cn>e)))
						put(!)
						go(/\1)
						make(\/0)
						go(\/0)
						put(ty(e))
						ttrput([x:e|head==x:e])
						put(+Q)
						put(+meta)
						go(/\0)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(cn))
				ELSE	abort
								


pron_whq_det(CLASS)
IF		<Y>+Q
THEN	abort
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
				¬<\/0>Ex.x
				¬<\/*>Ex.x
				¬</\L>Ex.x
		THEN	make(\/*)
				go(\/*)
				put(?Ex.tn(x))
				put(?ty(e))
				put(person(plur))
				make(\/1)
				go(\/1)
				put(?ty(cn>e))
				make(\/1)
				go(\/1)
				ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e])))
				put(ty(e>(cn>e)))
				put(!)
				go(/\1)
				make(\/0)
				go(\/0)
				put(ty(e))
				ttrput([x:e|head==x:e])
				put(+Q)
				put(+meta)
				go(/\0)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(cn))
		ELSE	IF		?ty(e)
						Ex.tn(x)
						¬<\/1>Ex.x
						¬<\/0>Ex.x
						¬<\/*>Ex.x
						¬</\L>Ex.x
				THEN	make(\/1)
						go(\/1)
						put(?ty(cn>e))
						make(\/1)
						go(\/1)
						ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e])))
						put(ty(e>(cn>e)))
						put(!)
						go(/\1)
						make(\/0)
						go(\/0)
						put(ty(e))
						ttrput([x:e|head==x:e])
						put(+Q)
						put(+meta)
						go(/\0)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(cn))	
				ELSE	abort






//*
pron_nom(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(t)
        </\C>(ty(e)& fo(Y)& Y << [L:e|P==PERSON(L):t])
THEN    put(ty(e))
        put(Fo([L:e|P==PERSON(L):t]))
        put(!)
ELSE    abort

*//

pron_acc(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(e>X)
        </\C>(ty(e)& fo(Y)& Class(CLASS)& ¬+Q)
THEN    put(ty(e))
        put(Fo(Y))
        put(!)
ELSE    abort

//*
pron_ref(PERSON,CLASS)
IF		?ty(e)
		¬</\0>?ty(es>t)
		</\0/\*\/0>(ty(e)& fo(X)& class(CLASS)& person(PERSON))
THEN	put(fo(X))
		put(ty(e))
		put(person(PERSON))
		put(class(CLASS))
		put(!)
ELSE	abort


*//


//relative-pronoun with lexicalised link adjunction
pron_whrel(CLASS)
IF		ty(e)
        fo(X)
        ¬<\/L>Ex.x
THEN	make(\/L)
        go(\/L)
        put(?ty(t))
        make(\/*)
        go(\/*)
        put(ty(e))
        put(fo(X))
        put(?Ex.tn(x))
       	go(/\*)
       	make(\/1)
       	go(\/1)
       	put(?ty(e>t))
       	go(/\1)
       	make(\/0)
       	go(\/0)
       	put(?ty(e))
ELSE	abort




v_intran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬+BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort

v_intran_post_causative(PRED,TENSE,PERSON)
IF		?ty(t)
  		</\0>?ty(e>(e>t))
       	¬<\/0>Ex.x
        ¬<\/1>Ex.x
        </\0/\1\/0>Fo(X)
THEN	make(\/0)
		go(\/0)
		put(ty(e))
		put(Fo(X))
		go(/\0)
		make(\/1)
		go(\/1)
		put(ty(e>t))
		v_intran_content(PRED)
ELSE	abort

v_intran_ing(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
        +BE
THEN	delete(?Ex.fo(x))
		ttrput(R1^(R1 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R1.head):t|p3==cont(e1):t]))
		put(!)
ELSE	abort


v_intran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		</\1\/0>person(PERSON)	
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		event_restrictor(TENSE)
		go(/\L)
		put(ty(e>t))
		delete(?ty(e>t))		
		put(?Ex.fo(x))
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort  


v_tran_causative_imperative(PRED,TENSE,PERSON)
IF		?ty(e)
		</\0\/1>Ex.x
		Addressee(X)
THEN	put(ty(e))
		delete(?ty(e))
		ttrput([x==X:e|head==x:e])
		go(/\0)
		go(\/1)	
		put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p1==imperative(head):t])
		go(/\L)
		make(\/1)
		go(\/1)
		put(?ty(e>(e>t)))
		make(\/1)
		go(\/1)
		put(ty(t>(e>(e>t))))
		ttrput(R3^R1^R2^(R1 ++ (R2 ++ (R3 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R2.head):t|p3==obj(e1, R1.head):t|p4==ind_obj(e1, R3.head):t]))))
		put(!)
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(t))
		go(/\0)
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort

		
		
v_tran_fin_imperative(PRED,TENSE,PERSON)
IF		?ty(e)
		</\0\/1>Ex.x
		Addressee(X)
THEN	put(ty(e))
		delete(?ty(e))
		ttrput([x==X:e|head==x:e])
		go(/\0)
		go(\/1)	
		put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p1==imperative(head):t])
		go(/\L)
		v_tran_content(PRED)
ELSE	abort


v_subjcon_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬+BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
        </\1\/0>fo(X)
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(t>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R2.head):t|p3==obj(e1, R1.head):t])))
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(t))
        make(\/0)
        go(\/0)
        put(fo(X))
        put(ty(e))
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>t))//this will overgenerate. you'll be able to parse finite verb at this point
ELSE	abort

v_subjcon_ing(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
        +BE
        </\1\/0>fo(X)
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(t>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R2.head):t|p3==obj(e1, R1.head):t])))
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(t))
        make(\/0)
        go(\/0)
        put(fo(X))
        put(ty(e))
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>t))//this will overgenerate. you'll be able to parse finite verb at this point
ELSE	abort

v_subjcon_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        </\1\/0>person(PERSON)
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		event_restrictor(TENSE)
		go(/\L)
		put(ty(e>t))
		delete(?ty(e>t))		
		put(?Ex.fo(x))
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
        </\1\/0>fo(X)
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(t>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R2.head):t|p3==obj(e1, R1.head):t])))
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(t))
        make(\/0)
        go(\/0)
        put(fo(X))
        put(ty(e))
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>t))//this will overgenerate. you'll be able to parse finite verb at this point
ELSE	abort


to_subjcon(PRED)
IF	    ?ty(e>t)
		</\1/\0>?ty(e>t)
THEN	put(?Ex.fo(x))
		put(ty(e>t))
		delete(?ty(e>t))
ELSE	abort

v_tran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬+BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort

v_tran_ing(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        +BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
	    make(\/1)
		go(\/1)
		ttrput(R1^R2^(R1 ++ (R2 ++ [e1==PRED:es|head==e1:es|p2==subj(e1, R2.head):t|p3==obj(e1, R1.head):t|p4==cont(e1):t])))
		put(ty(e>(e>t)))
		put(!)
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE    abort

v_tran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		</\1\/0>person(PERSON)
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		event_restrictor(TENSE)
		go(/\L)
		put(ty(e>t))	
		delete(?ty(e>t))	
		put(?Ex.fo(x))		
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort



v_aux_inf_per(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1/\0>Ex.x
		</\1\/0>ty(e)
		</\1\/0>person(PERSON)
THEN 	aux_content(PRED)
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x
	 			¬</\0>Ex.x				
		THEN	IF 		<\/*>+Q
				THEN    make(\/1)
						go(\/1)
						put(person(PERSON))
						put(?ty(e>t))
						aux_content(PRED)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
				ELSE	put(+Q)
						make(\/1)
						go(\/1)
						put(person(PERSON))
						put(?ty(e>t))
						aux_content(PRED)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
		ELSE	abort


v_aux_inf(PRED,TENSE)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1/\0>Ex.x
		</\1\/0>ty(e)
THEN 	aux_content(PRED)
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x
	 			¬</\0>Ex.x				
		THEN	IF 		<\/*>+Q
				THEN    make(\/1)
						go(\/1)
						put(?ty(e>t))
						aux_content(PRED)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
				ELSE	put(+Q)
						make(\/1)
						go(\/1)
						put(?ty(e>t))
						aux_content(PRED)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
		ELSE	abort



v_aux_be(TENSE,PERSON,NUMBER)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1/\0>Ex.x
		</\1\/0>ty(e)
		</\1\/0>person(PERSON)
THEN 	delete(?ty(e>t))
		put(ty(e>t))
		put(?Ex.fo(x))
		put(person(PERSON))
		put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p1==TENSE(head):t])
		go(/\L)
		put(+BE)
ELSE	IF		?ty(t)
				¬!
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x
	 			¬</\0>Ex.x			
		THEN	IF 		<\/*>+Q
				THEN    make(\/1)
						go(\/1)
						put(ty(e>t))
						put(?Ex.fo(x))
						put(person(PERSON))
						put(?+eval)
						make(\/L)
						go(\/L)
						put(ty(t))
						ttrput([head:es|p1==TENSE(head):t])
						go(/\L)
						put(+BE)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
				ELSE	put(+Q)
						make(\/1)
						go(\/1)
						put(ty(e>t))
						put(?Ex.fo(x))
						put(person(PERSON))
						put(?+eval)
						make(\/L)
						go(\/L)
						put(ty(t))
						ttrput([head:es|p1==TENSE(head):t])
						go(/\L)
						put(+BE)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
		ELSE	abort

v_aux_be_inf(TENSE, PERSON)
IF		ty(e>t)
		?Ex.fo(x)
THEN	put(+BE)
ELSE	abort

v_be_inf(TENSE,PERSON)
IF		ty(e>t)
		?Ex.fo(x)
THEN	delete(ty(e>t))
		delete(?Ex.fo(x))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R2 ++ (R1 ++ [e1==eq:es|p==subj(e1,R2.head):t|p1==obj(e1,R1.head):t|head==e1:es])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort
		

v_be(TENSE,PERSON,NUMBER)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1/\0>Ex.x
		</\1\/0>ty(e)
		</\1\/0>person(PERSON)
THEN 	make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R2 ++ (R1 ++ [e1==eq:es|p==subj(e1,R2.head):t|p1==obj(e1,R1.head):t|head==e1:es])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	IF		?ty(t)
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x
	 			¬</\0>Ex.x			
		THEN	IF 		<\/*>+Q
				THEN    make(\/1)
						go(\/1)
						put(?ty(e>t))
						put(person(PERSON))
						make(\/1)
						go(\/1)
						put(ty(e>(e>t)))
						ttrput(R1^R2^(R2 ++ (R1 ++ [e1==eq:es|p==subj(e1,R2.head):t|p1==obj(e1,R1.head):t|head==e1:es])))
						put(!)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
						go(/\0)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
				ELSE	put(+Q)
						make(\/1)
						go(\/1)
						put(?ty(e>t))
						put(person(PERSON))
						make(\/1)
						go(\/1)
						put(ty(e>(e>t)))
						ttrput(R1^R2^(R2 ++ (R1 ++ [e1==eq:es|p==subj(e1,R2.head):t|p1==obj(e1,R1.head):t|head==e1:es])))
						put(!)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
						go(/\0)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
		ELSE	abort

//*
prep_es(PRED)
IF		ty(t)
		¬<\/L>Ex.x		
THEN	IF		<\/*>?Ex.tn(x)
			  	<\/*>ty(e)
		THEN	put(?+eval)
				make(\/L)
				go(\/L)
				put(?ty(t))
				make(\/1)
				go(\/1)
				put(ty(e>t))
				ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
				merge(</\0/\L\/*>)
			 	delete(?ty(e))
		ELSE 	put(?+eval)
				make(\/L)
				go(\/L)
				put(?ty(t))
				make(\/1)
				go(\/1)
				put(ty(e>t))
				ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
ELSE	abort
*//

prep_es(PRED)
IF		ty(t)
		¬<\/L>Ex.x		
THEN	IF		<\/*>?Ex.tn(x)
			  	<\/*>ty(e)
		THEN	put(?+eval)
				make(\/L)
				go(\/L)
				put(?ty(t))
				make(\/1)
				go(\/1)
				put(ty(e>t))
				ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
				merge(</\0/\L\/*>)
			 	delete(?ty(e))
		ELSE 	IF		complete
						Speaker(X)
						PrevSpeaker(Y)
						¬X=Y
						<Z>(+Q & +meta)
				THEN	go(Z)
						delete(+Q)
						delete(+meta)
						gofirst(tn(0))
						put(?+eval)
						make(\/L)
						go(\/L)
						put(?ty(t))
						make(\/1)
						go(\/1)
						put(ty(e>t))
						ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
				ELSE	put(?+eval)
						make(\/L)
						go(\/L)
						put(?ty(t))
						make(\/1)
						go(\/1)
						put(ty(e>t))
						ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
ELSE	abort


prep_postcop(PRED)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		ttrput(R1^R2^(R1 ++ (R2 ++ [e1:es|p==subj(e1,R2.head):t|p1==PRED(e1,R1.head):t|head==e1:es])))
		put(ty(e>(e>t)))
		put(!)
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort

prep_e(PRED)
IF		ty(e)
		¬<\/L>Ex.x
		fo(X)		
THEN	IF		+Q
		THEN	delete(+Q)
				delete(+meta)
				put(?+eval)
				make(\/L)
				go(\/L)
				put(?ty(t))
				make(\/1)
				go(\/1)
				put(?ty(e>t))
				make(\/1)
				go(\/1)
				ttrput(R1^R2^(R1 ++ (R2 ++ [p==PRED(R2.head,R1.head):t])))
				put(ty(e>(e>t)))
				put(!)
				go(/\1)
				go(/\1)
				make(\/0)
				go(\/0)
				put(fo(X))
				put(ty(e))
				put(!)
				go(/\0)
				go(\/1)
				make(\/0)
				go(\/0)
				put(?ty(e))
		ELSE	put(?+eval)
				make(\/L)
				go(\/L)
				put(?ty(t))
				make(\/1)
				go(\/1)
				put(?ty(e>t))
				make(\/1)
				go(\/1)
				ttrput(R1^R2^(R1 ++ (R2 ++ [p==PRED(R2.head,R1.head):t])))
				put(ty(e>(e>t)))
				put(!)
				go(/\1)
				go(/\1)
				make(\/0)
				go(\/0)
				put(fo(X))
				put(ty(e))
				put(!)
				go(/\0)
				go(\/1)
				make(\/0)
				go(\/0)
				put(?ty(e))
ELSE	abort



manner_adv(PRED)
IF		ty(t)
		¬<\/L>Ex.x		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p==PRED(head):t])
ELSE	abort







assert(PRED)
IF		ty(Y>Z)
THEN	abort
ELSE	IF		</\0\/1>Ex.x
				¬</\0\/1>Ex.?x
				¬Ex.?x
		THEN	abort
		ELSE	IF	  	¬Ex.?x
					  	¬</\L>Ex.x
					  	Speaker(W)
					  	PrevSpeaker(X)
					  	¬X=Y
				THEN  	IF		Assert(W)
					  	THEN	do_nothing
					  	ELSE	put(Assert(W))
				ELSE  	abort


question(PRED)
IF		(ty(Y>Z) || <W>?Ex.tn(x))
THEN	abort
ELSE	IF		</\0\/1>Ex.x
				¬</\0\/1>Ex.?x
				¬Ex.?x
		THEN	abort
		ELSE	IF	    ty(X)
					    ¬</\L>Ex.x   
				THEN    IF	  	<Z>+Q
			    	    THEN  	do_nothing
					    ELSE  	put(+Q)
				ELSE    abort

//*

question(PRED)
IF		ty(t)
		complete
THEN	IF	  	Assert(X)
		THEN  	abort
		ELSE    IF	  	<Z>+Q
			    THEN  	do_nothing
				ELSE  	put(+Q)
ELSE	abort	

*//

greet(PRED)
IF		</\C>Ex.x
THEN	abort
ELSE	IF		?ty(t)
				¬<\/0>Ex.x
				¬<\/1>Ex.x
				¬<\/*>Ex.x
		THEN	delete(?ty(t))
				put(ty(t))
				ttrput([e1==PRED:es|head:e1])
				put(?+greet)
				put(!)
		ELSE	IF		ty(t)
						?+greet
						Speaker(X)
						PrevSpeaker(Y)
						¬X=Y
				THEN	delete(?+greet)
						put(Assert(X))
				ELSE	abort

release_turn(PRED)
IF		ty(Y>Z)
THEN	abort
ELSE	IF		</\0\/1>Ex.x
				¬</\0\/1>Ex.?x
				¬Ex.?x
		THEN	abort
		ELSE	IF	  	ty(X)
					  	¬</\L>Ex.x
					  	Speaker(W)
					 	PrevSpeaker(V)
						W=V
						¬floor_open
				THEN	IF		(Assert(W) || <Z>+Q)
					 	THEN	open_floor
						ELSE	IF	 	¬Ex.?x
								THEN	put(Assert(W))
										open_floor
								ELSE	open_floor
				ELSE    abort


//*
release_turn(PRED)
IF		Speaker(X)
		PrevSpeaker(Y)
		X=Y
		¬floor_open
THEN	IF		ty(t)
				complete
		THEN	IF		(Assert(X) || <Z>+Q)
				THEN	open_floor
				ELSE	put(Assert(X))
						open_floor
		ELSE	open_floor
ELSE	abort
*//

//*
IF		¬+Q
				?ty(e)
				Ex.tn(x)
				¬</\0>?ty(t)
		THEN	IF		<Z>?Ex.tn(x)
				THEN	abort	
				ELSE	put(+Q)
						put(ty(e))
						ttrput([x:e|head==x:e])
						delete(?ty(e))
		ELSE	abort
*//



reject(PRED)
IF		ty(t)
		complete
		¬<Z>+Q
THEN	IF	    +Q
		THEN    delete(+Q)
			    put(+neg)
		        put(!)
		ELSE    put(+neg)
				put(!)
ELSE	abort

//'yes' as acceptance of assertion
accept(PRED)
IF		¬+Q
		Speaker(X)
		Assert(Y)
THEN	IF		Assert(X)
		THEN	abort
		ELSE	put(Assert(X))
ELSE	abort

// 'yes' as answer to question
//needs to distinguish between meta-variables put by wh-terms and fully-fledged formulae
yes(PRED)
IF 		¬+meta
		+Q
		Speaker(X)
		PrevSpeaker(Y)
THEN	IF		X=Y
		THEN    abort
		ELSE	delete(+Q)
				put(Assert(X))
ELSE	abort

not(PRED)
IF		ty(e>t)
		?Ex.Fo(x)
		¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.Fo(x))
		make(\/1)
		go(\/1)
		put(ty((e>t)>(e>t)))
		ttrput(R1^(R1 ++ [p==PRED(R1.head):t|head==p:t]))
		put(!)
		go(/\1)
		make(\/0)
		put(?ty(e>t))
		put(?Ex.Fo(x))
ELSE	abort
		