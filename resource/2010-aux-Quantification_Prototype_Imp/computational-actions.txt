// Computational actions for English
// as per Dynamics of Conversational Dialogue project, 2010

// Rules prefixed with * are non-optional
// Rules prefixed with + are applied repeatedly, exhausting all successful Rule Metavariable combinations
// If a Rule is both non-optional and is to be exhaustively applied, 
// then the + should be preceded by the *, i.e. the name should be prefixed by "*+".
// i.e. the suffix become
// Rule metavariables: X,Y,Z
// Formula metavariables: A,B,C

anticipation0
IF      <\/0>Ex.?x
THEN    go(\/0)
ELSE    abort

anticipation1
IF      <\/1>Ex.?x
THEN    go(\/1)
ELSE    abort

*thinning
IF      ?X
        X
THEN    delete(?X)
ELSE    abort


*thinningM
IF      ?<Y>X
        <Y>X
THEN    delete(?<Y>X)
ELSE    abort


completion
IF      ty(X)
		¬?ty(X)
        </\>Ex.x
THEN    go(/\)
ELSE    abort

*elimination
IF      ?ty(X)
        ¬Ex.fo(x)
        <\/1>ty(Y>X)
        <\/0>ty(Y)
        ¬<\/1>Ex.?x
        ¬<\/0>Ex.?x
THEN    beta-reduce
ELSE    abort

star-adjunction
IF      ?ty(t)
        ¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/*>Ex.x
        ¬<\/U>Ex.x
THEN    make(\/*)
        go(\/*)
        put(?ty(e))
        put(?Ex.tn(x))
ELSE    abort

local-star-adjunction
IF		?ty(t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		¬<\/U>Ex.x
THEN	make(\/U)
		go(\/U)
		put(?ty(e))
		put(?Ex.tn(x))	
ELSE	abort

link-adjunction
IF      ty(e)
        fo(X)
        ¬<\/L>Ex.x
THEN    make(\/L)
        go(\/L)
        put(?ty(t))
        put(?<\/*>fo(X))
ELSE    abort

*link-evalSameType
IF      </\L>Ex.x
        </\L>ty(Y)
        ¬Ex.?x
        ty(Y)
        fo(X)                
THEN    go(/\L)
        conjoin(X)
ELSE    abort

merge
IF      Ex.tn(x)
		<Y>?Ex.tn(x)
		subsumes(Y)
		?ty(V)		
		<Y>ty(V)		           
THEN    merge(Y)
		delete(?ty(V))
		delete(?Ex.tn(x))
		go(/\)		
ELSE    abort

*link-evaluation
IF      ¬Ex.?x
        ¬+linked
        <\/0\/L>fo(X)
        ¬Ex.<\/0\/L>?x
THEN    conjoin(X)
        put(+linked)
ELSE    abort

//*
empty-complementiser
IF      ?ty(e)
        ¬Ex.tn(x)
        </\*/\L>fo(X)
	    </\*/\L/\0>?ty(cn)
THEN    put(ty(e))
        put(fo(X))
ELSE    abort

late-star-adjunction
IF      </\*>tn(0)
        ¬!
        ty(X)  // could restrict this to e/t but no way to do disjunction here yet
        ¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/*>Ex.x // should actually check for no existing unfixed node in this sub-tree
        Ex.tn(x)
THEN    make(\/*)
        go(\/*)
        put(?ty(X))
        put(?Ex.tn(x))
ELSE    abort

*//

local-substitution
IF      ty(X) //this will only work for pronouns. 
        ?Ex.fo(x)
        class(V)
        person(W)
        <Y>ty(X)
        <Y>fo(Z) // should also check +CLASS, +PERSON compatibility here. Done.
        <Y>class(V)
        <Y>person(W)
        ¬</\0/\*\/0>fo(Z)      
THEN    put(fo(Z))
ELSE    abort


+context-substitution-pron
IF		ty(e)
		person(X)
		class(Z)
		?Ex.fo(x)
		context_tree(ty(e)& person(X)& class(Z)& fo(Y))	
THEN	put(fo(Y))
ELSE	abort

context-substitution-other
IF		¬ty(e)
		ty(X)
		?Ex.fo(x)
		context_tree(ty(X)& fo(Y))
		//</\C\/0\/0\/1\/1>fo(Z)
THEN	put(fo(Y))
		//go(up and down)
		//put(fo(Z))
ELSE	abort

regeneration
IF		ty(X)
		?Ex.fo(x)
		triggered_by(Y, ty(X))
THEN	do(Y)
ELSE	abort

*scope-indefinite
IF		Indef(+)
		?Sc(X)
THEN	gofirst(?ty(t))
		IF		DOM(Y)
				¬Y=X
				<Z>?Sc(X)
		THEN	go(<Z>)
				delete(?Sc(X))
				gofirst(?ty(t))
				IF		Scope(Y<X)		
				THEN	put(?dep_saturated(Y,X))							
				ELSE	put(Scope(Y<X))
						put(?dep_saturated(Y,X))
		ELSE	abort				
ELSE	abort


*dependency-saturation
IF		ty(t)
		?dep_saturated(X,Y)
THEN	saturate_scope_dep(X,Y)
		delete(?dep_saturated(X,Y))
ELSE	abort


*scope-non-indefinite
IF		Indef(-)
		¬</\0/\*\/0>(Indef(-) & ?Sc(Z))
		?Sc(X)
THEN	gofirst(?ty(t))
		IF		DOM+(Y)
				¬Y=X
				¬Scope(X<Y)
				<Z>?Sc(X)
		THEN	IF		Ex.(DOM+(x) & ¬x=Y & ¬x=X & Scope(Y<x))
				THEN	abort
				ELSE	put(Scope(Y<X))
						go(<Z>)
						delete(?Sc(X))
						gofirst(?ty(t))
		ELSE	abort
ELSE	abort


