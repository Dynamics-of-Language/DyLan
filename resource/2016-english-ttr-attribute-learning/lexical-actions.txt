// Lexical actions for English
// as per Dynamics of Conversational Dialogue project, 2009

// Rule metavariables: uppercase rule spec arguments
// Formula metavariables: A,B,C
// Bottom requirement: !



proper(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(PERSON))
        put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([x==NAME:e|head==x:e])
        put(+PN)
ELSE    abort


det_indef(QUANT)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(s3))
		put(class(obj))
		make(\/1)
        go(\/1)
        ttrput(R^(R ++ [head==R.head:e]))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

det_indef_postcop(QUANT)
IF		?ty(cn)
		¬</\0>?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬+indef
THEN	delete(?Ex.fo(x))
		put(+indef)
ELSE	abort

adj(PRED,META)
IF      ?ty(cn)
		+indef
THEN    IF 		?Ex.tn(x)
				¬</\*/\0\/1\/L>Ex.x 
		THEN	go(/\*/\0\/1)
				put(?+eval)
				make(\/L)
 		     	go(\/L)
 		        put(ty(cn>(e>t)))
 		        ttrput([head:e|pred==PRED:cn|p1==subj(pred,head):t|p2==META(pred):t])
 		        go(/\L/\1\/0\/*)
		ELSE    IF		¬?Ex.tn(x)
						¬</\0\/1\/L>Ex.x
				THEN	go(/\0\/1)
			    		put(?+eval)
						make(\/L)
        				go(\/L)
        				put(ty(cn>(e>t)))
        				ttrput([head:e|pred==PRED:cn|p1==subj(pred,head):t|p2==META(pred):t])
        				go(/\L/\1\/0)
        		ELSE	abort
ELSE    IF		?ty(cn)
		THEN	ttrput([pred==PRED:cn|p2==META(pred):t|head==pred:cn])
				put(ty(cn))
				delete(?ty(cn))
				delete(?Ex.fo(x))
				put(!)
		ELSE	abort


		

count(PRED,PERSON,CLASS)
IF      ?ty(cn)
		</\*\/1>ty(cn>e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    make(\/1)
        go(\/1)
        ttrput(R^(R ++ [pred==PRED:cn|p==class(pred):t|p1==subj(pred,R.head):t|p2==CLASS(pred):t]))
        put(ty(e>cn))      
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        ttrput([x:e|head==x:e])
        put(ty(e))
ELSE    IF		?ty(cn)
				¬<\/1>Ex.x
        		¬<\/0>Ex.x
        		+indef
		THEN	ttrput([pred==PRED:cn|p==class(pred):t|p2==CLASS(pred):t|head==pred:cn])
				put(ty(cn))
				delete(?ty(cn))
				put(!)
		ELSE	abort

det_def_postcop(QUANT)
IF		ty(e>t)
		+BE
		?Ex.fo(x)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	delete(ty(e>t))
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [p2==eq(R1.head,R2.head):t|head==p2:t])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
		make(\/1)
		go(\/1)
		ttrput(R^[r:R | x1==(QUANT, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

demonst(PRED,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([x==PRED:e|head==x:e])
ELSE    abort

//*
det_demonst(PRED,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(s3))	
		make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==PRED(R.head):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort
*//

my(PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        Speaker(X)
THEN	make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==of(R.head,X):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

your(PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==of(R.head,you):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort


mass(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(ty(e))
		delete(?ty(e))
        ttrput([x==NAME:e|head==x:e])
        put(person(PERSON))
        put(class(CLASS))
        put(!)
ELSE    abort

//TODO: head should be of type cn, not e?







i(PERSON,CLASS)
IF		?ty(e)
		Speaker(X)
THEN	ttrput([x==X:e|head==x:e])
		put(ty(e))
		delete(?ty(e))
ELSE	abort



cn_meta_cat(PRED)
IF		?ty(cn)
		</\L>ty(cn)
THEN	put(ty(cn))
		delete(?ty(cn))
		ttrput([head:cn|p==PRED(head):t|p1==class(head):t])
ELSE	abort



pron_whq_det_cop(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
		¬<\/0>Ex.x
		¬<\/1>Ex.x
THEN	make(\/*)
		go(\/*)
		put(ty(cn))
		put(?Ex.tn(x))
		ttrput([pred:cn|head==pred:cn])
		put(+Q)
		put(class(CLASS))
		put(?+eval)
		make(\/L)
		go(\/L)
		put(?ty(cn))
ELSE	abort

pron_whq_cop(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
		¬<\/0>Ex.x
		¬<\/1>Ex.x
THEN	make(\/*)
		go(\/*)
		put(ty(cn))
		put(?Ex.tn(x))
		ttrput([pred:cn|head==pred:cn|p==class(pred):t])
		put(+Q)
		put(class(CLASS))
ELSE	abort


//*
pron_whq(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
		¬<\/0>Ex.x
		¬<\/1>Ex.x
THEN	make(\/*)
		go(\/*)
		put(?Ex.tn(x))
		put(ty(e))
		ttrput([x:e|head==x:e])
		put(+Q)
		put(class(CLASS))
ELSE	abort

pron_whq_det_cop(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
		¬<\/0>Ex.x
		¬<\/1>Ex.x
THEN	make(\/*)
		go(\/*)
		put(?Ex.tn(x))
		put(?ty(cn))
		make(\/1)
		go(\/1)
		put(ty(cn>cn))
		ttrput(R1^(R1 ++ [head==R1.head:cn]))
		go(/\1)
		make(\/0)
		go(\/0)
		put(ty(cn))
		ttrput([pred:cn|head==pred:cn])
		put(+Q)
		go(/\0)
		
ELSE	abort
*//




pron_nom(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(t)
THEN    put(ty(e))
        ttrput([x==this:e|head==x:e])
        put(!)
ELSE    abort

pron_acc(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(e>X)
THEN    put(ty(e))
        ttrput([x==this:e|head==x:e])
        put(!)
ELSE    abort

//*
pron_acc(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(e>X)
        </\C>(ty(e)& fo(Y)& Class(CLASS)& ¬+Q)
THEN    put(ty(e))
        put(Fo(Y))
        put(!)
ELSE    abort


pron_ref(PERSON,CLASS)
IF		?ty(e)
		¬</\0>?ty(es>t)
		</\0/\*\/0>(ty(e)& fo(X)& class(CLASS)& person(PERSON))
THEN	put(fo(X))
		put(ty(e))
		put(person(PERSON))
		put(class(CLASS))
		put(!)
ELSE	abort


*//


//relative-pronoun with lexicalised link adjunction
pron_whrel(CLASS)
IF		ty(e)
        fo(X)
        ¬<\/L>Ex.x
THEN	make(\/L)
        go(\/L)
        put(?ty(t))
        make(\/*)
        go(\/*)
        put(ty(e))
        put(fo(X))
        put(?Ex.tn(x))
ELSE	abort




v_intran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬+BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort



v_intran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		//</\1\/0>person(PERSON)	
THEN	//put(?+eval)
		//make(\/L)
		//go(\/L)
		//put(ty(t))
		//event_restrictor(TENSE)
		//go(/\L)
		put(ty(e>t))
		delete(?ty(e>t))		
		put(?Ex.fo(x))
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort  


v_tran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬+BE
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort



v_tran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	put(ty(e>t))	
		delete(?ty(e>t))	
		put(?Ex.fo(x))		
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort

v_aux_inf(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
		</\1\/0>ty(e)
THEN 	aux_content(PRED)
ELSE	IF		?ty(t)
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x				
		THEN	put(+Q)
				make(\/1)
				go(\/1)
				put(?ty(e>t))
				aux_content(PRED)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
		ELSE    abort



copula(TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1\/*>?Ex.tn(x)//this will preclude relatives with the copula... "I don't know what this is."
		</\1\/0>ty(e)
THEN	make(\/1)
		go(\/1)
		put(ty(cn>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,head):t])))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		put(?Ex.fo(x))
ELSE	abort



copula_whq(TENSE,PERSON)
IF		?ty(t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	<Y>?Ex.tn(x)
	 	<Y>ty(cn)
	 	<Y>+Q			
THEN	make(\/0)
		go(\/0)
		put(?ty(e))
		go(/\0)
		make(\/1)
		go(\/1)
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		put(ty(cn>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,R2.head):t])))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		IF		<Z>?Ex.tn(x)
	 			<Z>ty(cn)
	 			<Z>+Q
	 	THEN	merge(Z)
	 			delete(?ty(cn))
		ELSE	abort
ELSE	abort

copula_q(TENSE,PERSON)
IF		?ty(t)
		¬<\/1>Ex.x
		¬<\/0>Ex.x	
THEN    IF		<Y>?Ex.tn(x)
	 			<Y>ty(cn)
	 			<Y>+Q
	 	THEN	abort
	 	ELSE	put(+Q)
	 			make(\/1)
				go(\/1)
				put(?ty(e>t))
				make(\/1)
				go(\/1)
				put(ty(cn>(e>t)))
				ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,R2.head):t])))
				go(/\1)
				make(\/0)
				go(\/0)
			    put(?ty(cn))
				put(?Ex.fo(x))
				go(/\0)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
ELSE	abort

//*
copula(TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
	 	¬</\1\/*>?Ex.tn(x)//this will preclude relatives with the copula... "I don't know what this is."
		</\1\/0>ty(e)
THEN	make(\/1)
		go(\/1)
		put(ty(cn>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,head):t])))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		put(?Ex.fo(x))
ELSE	IF		?ty(t)
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x
	 			<Y>?Ex.tn(x)
	 			<Y>ty(cn)
	 			<Y>+Q			
		THEN	make(\/1)
				go(\/1)
				put(?ty(e>t))
				make(\/1)
				go(\/1)
				put(ty(cn>(e>t)))
				ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,R2.head):t])))
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(cn))
				//merge(</\0/\1Y)
				//delete(?ty(cn))
				//delete(?Ex.tn(x))
				go(/\0)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
		ELSE	IF		?ty(t)
						¬<\/1>Ex.x
	 					¬<\/0>Ex.x
	 			THEN	put(+Q)
	 					make(\/1)
						go(\/1)
						put(?ty(e>t))
						make(\/1)
						go(\/1)
						put(ty(cn>(e>t)))
						ttrput(R1^R2^(R1 ++ (R2 ++ [head==R2.head:e|p==subj(R1.head,R2.head):t])))
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(cn))
						put(?Ex.fo(x))
						go(/\0)
						go(/\1)
						make(\/0)
						go(\/0)
						put(?ty(e))
	 			ELSE	abort

*//

prep_es(PRED)
IF		(?ty(t) || ty(t) || ty(e>t))
		¬<\/L>Ex.x		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(?ty(t))
		make(\/1)
		go(\/1)
		put(ty(e>t))
		ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort

prep_e(PRED)
IF		ty(e)
		¬<\/L>Ex.x
		fo(X)		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(?ty(t))
		make(\/1)
		go(\/1)
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		ttrput(R1^R2^(R1 ++ (R2 ++ [p==PRED(R2.head,R1.head):t])))
		put(ty(e>(e>t)))
		put(!)
		go(/\1)
		go(/\1)
		make(\/0)
		go(\/0)
		put(fo(X))
		put(ty(e))
		put(!)
		go(/\0)
		go(\/1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort

manner_adv(PRED)
IF		(?ty(t) || ty(t) || ty(e>t))
		¬<\/L>Ex.x		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p==PRED(head):t])
ELSE	abort

*backchannel(PRED)
IF		ty(X)
THEN	complete
		ground
ELSE	abort

assert(PRED)
IF		ty(t)
		complete
THEN	IF		<Z>+Q
		THEN	abort
		ELSE	do_nothing
ELSE	abort

question(PRED)
IF		ty(t)
		complete
THEN	IF	  <Z>+Q
		THEN  do_nothing
		ELSE  put(+Q)
ELSE	abort



reject(PRED)
IF		ty(t)
		complete
		¬<\/*>+Q
THEN	IF	    +Q
		THEN    delete(+Q)
			    put(+neg)
		        put(!)
		ELSE    put(+neg)
				put(!)
ELSE	abort

accept(PRED)
IF		ty(t)
		complete
		¬+Q
		¬<\/*>+Q
		Speaker(X)
		PrevSpeaker(Y)
THEN	IF 		X=Y
		THEN	abort
		ELSE	do_nothing
ELSE	abort

yes(PRED)
IF 		ty(t)
		complete
		+Q
		Speaker(X)
		PrevSpeaker(Y)
THEN	IF		X=Y
		THEN    abort
		ELSE	delete(+Q)
ELSE	abort
		