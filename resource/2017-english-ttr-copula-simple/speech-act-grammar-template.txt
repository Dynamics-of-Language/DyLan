//*

NEW! Domain-specific actions for speech act inference (with their parameters). 
Can be learned from data annotated with speech acts (by parsing and generating this file.)

*//

check
IF	  	¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		¬<Z>+Q
		¬(+neg || <Z>+neg)
		Speaker(V)
THEN	put(sa:check(V))
ELSE	abort


info-color
IF	  	¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		Speaker(V)
THEN	IF		<Z>+Q
		THEN	abort
		ELSE	IF		(+neg || <Z>+neg)
				THEN	abort
				ELSE	put(sa:info(V,color:P8))
ELSE	abort

info-shape
IF	  	¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		Speaker(V)
THEN	IF		<Z>+Q
		THEN	abort
		ELSE	IF		(+neg || <Z>+neg)
				THEN	abort
				ELSE	put(sa:info(V,shape:P9))
ELSE	abort

info-color-shape
IF	  	¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		Speaker(V)
THEN	IF		<Z>+Q
		THEN	abort
		ELSE	IF		(+neg || <Z>+neg)
				THEN	abort
				ELSE	put(sa:info(V,color:P8,shape:P9))
ELSE	abort


info-neg-color
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		(+neg || <Z>+neg)
		Speaker(V)
THEN	put(sa:infoneg(V,color:P8))
ELSE	abort

info-neg-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		(+neg || <Z>+neg)
		Speaker(V)
THEN	put(sa:infoneg(V,shape:P9))
ELSE	abort

info-neg-color-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		(+neg || <Z>+neg)
		Speaker(V)
THEN	put(sa:infoneg(V,color:P8,shape:P9))
ELSE	abort

polar-color
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		+Q
		¬<Z>+meta
		Speaker(V)
THEN	put(sa:polar(V,color:P8))
ELSE	abort

polar-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		+Q
		¬<Z>+meta
		Speaker(V)
THEN	put(sa:polar(V,shape:P9))
ELSE	abort

polar-color-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		+Q
		¬<Z>+meta
		Speaker(V)
THEN	put(sa:polar(V,color:P8,shape:P9))
ELSE	abort

ask-color
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>(+Q & +meta)
		Speaker(V)
THEN	put(sa:askcolor(V))
ELSE	abort

ask-color-info-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>(+Q & +meta)
		Speaker(V)
THEN	put(sa:askcolor(V,shape:P9))
ELSE	abort

ask-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>(+Q & +meta)
		Speaker(V)
THEN	put(sa:askshape(V))
ELSE	abort

ask-shape-info-color
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>(+Q & +meta)
		Speaker(V)
THEN	put(sa:askshape(V,color:P8))
ELSE	abort


//e.g. what is this?
openask-1
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>+Q
		Speaker(V)
THEN	put(sa:openask(V))
ELSE	abort

//e.g. try this one
openask-2
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		Assert(V)
THEN	IF		<Z>+Q
		THEN	abort
		ELSE	put(sa:openask(V))
ELSE	abort

//A: this is red. B: good job.
accept-2
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		¬<Z>+Q
		Assert(V)
THEN	IF		(+neg || <Z>+neg)
		THEN	abort
		ELSE	put(sa:accept(V))
ELSE	abort

//e.g. that's incorrect
reject-2
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		¬<Z>+Q
		¬<Z>+neg
		Assert(V)
THEN	put(sa:reject(V))
ELSE	abort

//e.g. that's not correct
reject-3
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		¬<Z>+Q
		<Z>+neg
		Assert(V)
THEN	put(sa:reject(V))
ELSE	abort

reject-color
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>+neg
		Speaker(V)
		PrevSpeaker(W)
		¬Assert(W)
THEN	put(sa:reject(V,color:P8))
ELSE	abort

reject-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		<Z>+neg
		Speaker(V)
		PrevSpeaker(W)
		¬Assert(W)
THEN	put(sa:reject(V,shape:P9))
ELSE	abort

reject-color-shape
IF		¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		(+neg || <Z>+neg)
		Speaker(V)
		PrevSpeaker(W)
		¬Assert(W)
THEN	put(sa:reject(V,color:P8,shape:P9))
ELSE	abort
