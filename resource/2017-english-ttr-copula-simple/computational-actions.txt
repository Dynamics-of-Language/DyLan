// Computational actions for English
// as per Dynamics of Conversational Dialogue project, 2010

// Rules prefixed with * are non-optional
// Rules prefixed with + are applied repeatedly, exhausting all successful Rule Metavariable combinations
// If a Rule is both non-optional and is to be exhaustively applied, 
// then the + should be preceded by the *, i.e. the name should be prefixed by "*+".
// Rule metavariables: X,Y,Z
// Formula metavariables: A,B,C

intro-pred
IF		?ty(t)
		¬!
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/*>+Q
THEN	make(\/1)
		go(\/1)
		put(?ty(e>t))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort

anticipation0
IF      <\/0>Ex.?x
THEN    go(\/0)
ELSE    abort

anticipation1	
IF      <\/1>Ex.?x
THEN    go(\/1)
ELSE    abort

*thinning
IF      ?X
        X
THEN    delete(?X)
ELSE    abort


completion0
IF      ty(X)
		¬?ty(X)
        </\0>Ex.x
THEN    go(/\0)
ELSE    abort

completion1
IF      ty(X)
		¬?ty(X)
        </\1>Ex.x
THEN    go(/\1)
ELSE    abort

completion*
IF      ty(X)
		¬?ty(X)
        </\*>Ex.x
        ?Ex.tn(x)
THEN    go(/\*)
ELSE    abort

*elimination
IF      ?ty(X)
        ¬Ex.fo(x)
        <\/1>ty(Y>X)
        <\/0>ty(Y)
        ¬<\/1>Ex.?x
        ¬<\/0>Ex.?x
THEN    beta-reduce
ELSE    abort


star-adjunction
IF      ?ty(t)
        ¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/*>Ex.x
THEN    make(\/*)
        go(\/*)
        put(?ty(e))
        put(?Ex.tn(x))
ELSE    abort


//*
anticipationL
IF		(ty(t) || ty(e>t))
		<\/L>Ex.x
THEN	go(\/L)		
ELSE	abort
*//

//*

//TODO: to be possible only when the corresponding Ty(e) has a +Q on it..... 
//how would you do the link evalutation.... formula sharing... shared head.
link-adj-e
IF      ty(e)
		+PN
		¬<\/L>Ex.x
THEN    put(?+eval)
		make(\/L)
       	go(\/L)        
       	put(?ty(e))
ELSE    abort

*//
//anticipating wh-response
anticipation-res
IF		Speaker(X)
		PrevSpeaker(Y)
		¬X=Y
		ty(t)
		complete
		<Z>+Q
THEN	go(Z)
ELSE	abort

late-star-adj-q
IF		</\0>Ex.?x
THEN	abort
ELSE	IF		¬!
				+Q
       			ty(X)
		   		¬<\/1>Ex.x
		        ¬<\/0>Ex.x
		      	¬<\/*>Ex.x // should actually check for no existing unfixed node in this sub-tree
		        Ex.tn(x)
		THEN	delete(+Q)
		        make(\/*)
		        go(\/*)
		       	put(?Ex.tn(x))
		       	put(?ty(X))
		       	IF		</\*>+BE
		       	THEN	put(+BE)
		       	ELSE	do_nothing
		ELSE	abort





merge
IF      Ex.tn(x)
		¬<\/*>Ex.x
		<Y>(?Ex.tn(x) & ty(V))
		subsumes(Y)
THEN	IF		?ty(V)		           
		THEN    merge(Y)
				delete(?Ex.tn(x))	
		ELSE    IF		ty(V) 
						?Ex.fo(x)
				THEN	merge(Y)
						delete(?Ex.tn(x))
				ELSE	abort
ELSE	abort

*late-star-merge
IF		ty(Y)
		Ex.tn(x)
		<\/*>?Ex.tn(x)
		<\/*>ty(Y)
THEN	IF		Fo(X)
		THEN	delete(Fo(X))
				merge(<\/*>)
				delete(?Ex.tn(x))
				unreduce
		ELSE	merge(<\/*>)
				delete(?Ex.tn(x))
				unreduce
ELSE	abort



*link-evaluation
IF      ?+eval
		Ex.fo(x)
		<\/L>Ex.x
		<\/L>fo(X)
THEN    conjoin(X)
		delete(?+eval)
		IF		</\L>Ex.x
				¬</\L>?+eval
		THEN	go(/\L)
				put(?+eval)
		ELSE	do_nothing
ELSE    abort

//when to start a new clause
trp
IF		ty(Y>Z)
THEN	abort
ELSE	IF		ty(X)
				¬</\0\/1>Ex.x
				¬</\L>Ex.x
				¬?+eval
				PrevSpeaker(W)
				(<Z>+Q || Assert(W))
		THEN	addaxiom
		ELSE	abort

//Substitution for v_be only
substitution-copula
IF		?Ex.fo(x)
		?ty(e)
		</\0>+BE
		¬<\/0>Ex.x
		¬<\/1>Ex.x
		</\C>(ty(e)& </\0>+BE& fo(X))
THEN	delete(?Ex.fo(x))
		put(ty(e))
		delete(?ty(e))
		put(fo(X))
ELSE	abort

//*	
infer-speech-act
IF		ty(Y>Z)
THEN	abort
ELSE	IF	  	ty(X)
				¬</\0\/1>Ex.x
				¬</\L>Ex.x
				¬?+eval
				PrevSpeaker(W)
		THEN	IF		<Z>+Q
				THEN	IF		?Ex.tn(x)
						THEN	delete(?Ex.tn(x))
						ELSE	abort
				ELSE	IF		?Ex.tn(x)
						THEN	IF		Assert(W)
								THEN	delete(?Ex.tn(x))
								ELSE	put(Assert(W))
										delete(?Ex.tn(x))
						ELSE	IF		Assert(W)
								THEN	abort
								ELSE	put(Assert(W))
		ELSE    abort
		

infer-info
IF	  	¬ty(Y>Z)
		ty(X)
		¬</\0\/1>Ex.x
		¬</\L>Ex.x
		¬?+eval
		Fo(W)
		W << [x:e|e1==eq:es|x2:e|p2==Q(x2):t|p3==color(p2):t|p==subj(e1,x):t|p1==obj(e1,x2):t]
THEN	put(sa:info(color:Q))
ELSE	abort
*//	