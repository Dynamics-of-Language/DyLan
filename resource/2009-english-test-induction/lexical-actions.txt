// Lexical actions for English, for corpus generation
// as per RISER project, 2012

// Rule metavariables: uppercase rule spec arguments
// Formula metavariables: A,B,C
// Bottom requirement: !

proper(NAME,PERSON,CLASS)
IF      ?ty(e)
THEN    put(ty(e))
        put(fo(NAME))
        put(!)
ELSE    abort

mass(NAME,PERSON,CLASS)
IF      ?ty(e)
THEN    put(ty(e))
        put(fo(NAME))
        put(!)
ELSE    abort

count(PRED,PERSON,CLASS)
IF      ?ty(cn)
		//</\0>?ty(e)
THEN    make(\/0)
        go(\/0)
        freshput(S,entity)
        put(ty(e))      
        put(!)
        go(/\0)
        make(\/1)
        go(\/1)
        put(fo(x^x,PRED(x)))
        put(ty(e>cn))
        put(!)
        go(/\1)
        go(\/0)
ELSE    abort

det_quant(QUANT)
IF      ?ty(e)
THEN   	make(\/1)
        go(\/1)
        put(fo(x^(QUANT, x)))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

v_tran_fin(PRED,TENSE,PERSON)
IF      ?ty(e>t)
THEN    make(\/1)
        go(\/1)
        put(+PERSON)
        put(fo(y^x^PRED(x,y)))
        put(ty(e>(e>t)))
        put(!)
        go(/\)
        make(\/0)
        go(\/0)
        put(?ty(e))
ELSE    abort

v_intran_fin(PRED,TENSE,PERSON)
IF      ?ty(e>t)
        //*     [/\1\/0]+PERSON // case-matching not working yet *//
THEN    put(+PERSON)
        put(fo(X^PRED(X)))
        put(ty(e>t))
        put(!)
ELSE    abort

pron_whrel(CLASS)
IF      ?ty(e)
        </\*/\L>fo(X)
        ?Ex.tn(x)
THEN    put(ty(e))
        put(fo(X))
        put(!)
ELSE    abort

//*

adj(PRED)
IF      ty(e)
		fo(X)
		</\0>?ty(cn)
THEN    make(\/L)
        go(\/L)
        put(?ty(t))
        make(\/0)
        go(\/0)
        put(ty(e))
        put(fo(X))
        go(/\0)
        make(\/1)
        go(\/1)
        put(ty(e>t))
        put(fo(X))
        put(!)
ELSE    abort


pron_nom(PERSON,CLASS)
IF      ?ty(e)
        [/\]?ty(t)
THEN    put(ty(e))
        //* put(fo(A)) // formula metavariables not working with generation *//
        put(?Ex.fo(x))
        put(+PERSON)
        put(+CLASS)
        put(!)
ELSE    abort


pron_acc(PERSON,CLASS)
IF      ?ty(e)
        [/\]?ty(e>X)
THEN    put(ty(e))
        //* put(fo(A)) // formula metavariables not working with generation *//
        put(?Ex.fo(x))
        put(+PERSON)
        put(+CLASS)
        put(!)
ELSE    abort

pron_ref(PERSON,CLASS)
IF		?ty(e)
		Â¬</\0>?ty(t)
		</\0/\*\/0>fo(X)
THEN	put(fo(X))
		put(ty(e))
		put(+PERSON)
		put(+CLASS)
		put(!)
ELSE	abort

v_intran_inf(PRED,TENSE,PERSON)
IF      ty(e>t)
        Ex.?fo(x)
THEN    put(fo(x^PRED(x)))
        put(!)
ELSE    abort

v_tran_inf(PRED,TENSE,PERSON)
IF      ?ty(e>t)
        Ex.?fo(x)
THEN    make(\/1)
        go(\/1)
        put(fo(y^x^PRED(x,y)))
        put(ty(e>(e>t)))
        put(!)
        go(/\)
        make(\/0)
        go(\/0)
        put(?ty(e))
ELSE    abort

v_aux_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
THEN	put(ty(e>t))
		put(?Ex.fo(x))
ELSE	abort

*//
