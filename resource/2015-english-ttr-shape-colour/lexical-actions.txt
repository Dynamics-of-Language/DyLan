// Lexical actions for English
// as per Dynamics of Conversational Dialogue project, 2009

// Rule metavariables: uppercase rule spec arguments
// Formula metavariables: A,B,C
// Bottom requirement: !

//*
proper(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬</\L>Ex.x
THEN    put(person(PERSON))
        put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([r:[x:e|p==NAME(x):t|head==x:e]|x1==(iota, r.head, r):e|head==x1:e])
        put(+PN)
ELSE    abort
*//

proper(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(PERSON))
        put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([x==NAME:e|head==x:e])
        put(+PN)
ELSE    abort


det_quant(QUANT)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(s3))
		put(class(obj))
		make(\/1)
        go(\/1)
        ttrput(R^[r:R | x1==(QUANT, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

det_indef_postcop(QUANT)
IF		?ty(e>t)
		+BE
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	make(\/1)
		go(\/1)
		put(ty(cn>(e>t)))
		ttrput(R1^R2^(R2 ++ (R1 ++ [head==R2.head:e])))
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(cn))
ELSE	abort

det_def_postcop(QUANT)
IF		?ty(e>t)
		+BE
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	make(\/1)
		go(\/1)
		put(ty(e>(e>t)))
		ttrput(R1^R2^(R1 ++ (R2 ++ [p2==eq(R1.head,R2.head):t|head==p2:t])))
		put(!)
		go(/\)
		make(\/0)
		go(\/0)
		put(?ty(e))
		make(\/1)
		go(\/1)
		ttrput(R^[r:R | x1==(QUANT, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

demonst(PRED,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(class(CLASS))
        put(ty(e))
        delete(?ty(e))
        ttrput([x==PRED:e|head==x:e])
ELSE    abort

det_demonst(PRED,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(person(s3))	
		make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==PRED(R.head):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

my(PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
        Speaker(X)
THEN	make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==of(R.head,X):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

your(PERSON)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN	make(\/1)
        go(\/1)
        ttrput(R^[r:(R ++ [p==of(R.head,you):t]) | x1==(iota, r.head, r):e | head==x1:e])
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE	abort

mass(NAME,PERSON,CLASS)
IF      ?ty(e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    put(ty(e))
		delete(?ty(e))
        ttrput([x==NAME:e|head==x:e])
        put(person(PERSON))
        put(class(CLASS))
        put(!)
ELSE    abort

count(PRED,PERSON,CLASS)
IF      ?ty(cn)
		</\*\/1>ty(cn>e)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    make(\/1)
        go(\/1)
        ttrput(R^(R ++ [x==PRED:e|p==class(R.head,x):t]))
        put(ty(e>cn))      
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        ttrput([x:e|head:x])
        put(ty(e))
ELSE    IF		?ty(cn)
				</\*\/1>ty(cn>(e>t))
		THEN	ttrput([head:e|x==PRED:e|p==class(head,x):t])
				put(ty(cn))
				delete(?ty(cn))
				put(!)
		ELSE	abort

adj(PRED,CLASS)
IF      ?ty(cn)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    make(\/1)
        go(\/1)
        ttrput(R^(R ++ [x==PRED:e|p3==CLASS(R.head,x):t]))
        put(ty(cn>cn))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    IF		?ty(e>t)
				+BE
				?Ex.fo(x)
		THEN	ttrput(R^(R ++ [x==PRED:e|p3==CLASS(R.head,x):t]))
				put(ty(e>t))
				delete(?ty(e>t))
ELSE	abort


i(PERSON,CLASS)
IF		?ty(e)
		Speaker(X)
THEN	ttrput([x==X:e|head==x:e])
		put(ty(e))
		delete(?ty(e))
ELSE	abort





pron_whq(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
THEN	make(\/*)
		go(\/*)
		put(?Ex.tn(x))
		put(ty(e))
		ttrput([x:e|head==x:e])
		put(+WH)
		put(class(CLASS))
ELSE	IF		?ty(e)
		THEN	put(?Ex.tn(x))
				put(ty(e))
				ttrput([x:e|head==x:e])
				put(+WH)
				put(class(CLASS))
		ELSE	abort

pron_whq_cop(CLASS)
IF		?ty(t)
		¬<\/*>Ex.x
THEN	make(\/*)
		go(\/*)
		put(?Ex.tn(x))
		put(ty(e>t))
		ttrput(R2^(R2 ++ [head==R2.head:e|x:e|p==class(head,x):t]))
		put(+WH)
		put(class(CLASS))
ELSE	abort



pron_nom(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(t)
        </\C>(ty(e)& fo(Y)& Class(CLASS)& ¬+WH)
THEN    put(ty(e))
        put(Fo(Y))
        put(!)
ELSE    abort

pron_acc(PERSON,CLASS)
IF      ?ty(e)
        </\0>?ty(e>X)
        </\C>(ty(e)& fo(Y)& Class(CLASS)& ¬+WH)
THEN    put(ty(e))
        put(Fo(Y))
        put(!)
ELSE    abort

//*
pron_ref(PERSON,CLASS)
IF		?ty(e)
		¬</\0>?ty(es>t)
		</\0/\*\/0>(ty(e)& fo(X)& class(CLASS)& person(PERSON))
THEN	put(fo(X))
		put(ty(e))
		put(person(PERSON))
		put(class(CLASS))
		put(!)
ELSE	abort


*//


//relative-pronoun with lexicalised link adjunction
pron_whrel(CLASS)
IF		ty(e)
        fo(X)
        ¬<\/L>Ex.x
THEN	make(\/L)
        go(\/L)
        put(?ty(t))
        make(\/*)
        go(\/*)
        put(ty(e))
        put(fo(X))
        put(?Ex.tn(x))
ELSE	abort




v_intran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort



v_intran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		//</\1\/0>person(PERSON)	
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		event_restrictor(TENSE)
		go(/\L)
		put(ty(e>t))
		delete(?ty(e>t))		
		put(?Ex.fo(x))
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		v_intran_content(PRED)
ELSE	abort  


v_tran_inf(PRED,TENSE,PERSON)
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort



v_tran_fin(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		//</\1\/0>person(PERSON)
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		event_restrictor(TENSE)
		go(/\L)
		put(ty(e>t))	
		delete(?ty(e>t))	
		put(?Ex.fo(x))		
ELSE	abort
IF		ty(e>t)
        ?Ex.fo(x)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x
THEN	delete(?Ex.fo(x))
		delete(ty(e>t))
		put(?ty(e>t))		
		v_tran_content(PRED)
ELSE    abort

v_aux_inf(PRED,TENSE,PERSON)
IF		?ty(e>t)
		¬<\/1>Ex.x
	 	¬<\/0>Ex.x
		</\1\/0>ty(e)
THEN 	aux_content(PRED)
ELSE	IF		?ty(t)
				¬<\/1>Ex.x
	 			¬<\/0>Ex.x				
		THEN	put(+Q)
				make(\/1)
				go(\/1)
				put(?ty(e>t))
				aux_content(PRED)
				go(/\1)
				make(\/0)
				go(\/0)
				put(?ty(e))
		ELSE	abort



prep_es(PRED)
IF		(?ty(t) || ty(t) || ty(e>t))
		¬<\/L>Ex.x		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(?ty(t))
		make(\/1)
		go(\/1)
		put(ty(e>t))
		ttrput(R1^(R1 ++ [head:es|p==PRED(head,R1.head):t]))
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort



prep_e(PRED)
IF		ty(e)
		¬<\/L>Ex.x
		fo(X)		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(?ty(t))
		make(\/1)
		go(\/1)
		put(?ty(e>t))
		make(\/1)
		go(\/1)
		ttrput(R1^R2^(R1 ++ (R2 ++ [p==PRED(R2.head,R1.head):t])))
		put(ty(e>(e>t)))
		put(!)
		go(/\1)
		go(/\1)
		make(\/0)
		go(\/0)
		put(fo(X))
		put(ty(e))
		put(!)
		go(/\0)
		go(\/1)
		make(\/0)
		go(\/0)
		put(?ty(e))
ELSE	abort



manner_adv(PRED)
IF		(?ty(t) || ty(t) || ty(e>t))
		¬<\/L>Ex.x		
THEN	put(?+eval)
		make(\/L)
		go(\/L)
		put(ty(t))
		ttrput([head:es|p==PRED(head):t])
ELSE	abort

*backchannel(PRED)
IF		ty(X)
THEN	complete
		ground
ELSE	abort

assert(PRED)
IF		ty(t)
		complete
THEN	delete(+Q)
		ground
ELSE	abort

question(PRED)
IF		ty(t)
		complete
THEN	put(+Q)
		ground
ELSE	abort

accept(PRED)
IF		ty(t)
		complete
THEN	do_nothing
ELSE	abort

reject(PRED)
IF		ty(t)
		complete
THEN	put(+neg)
		put(!)
ELSE	abort