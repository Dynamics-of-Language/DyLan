// Lexical actions for English
// as per Dynamics of Conversational Dialogue project, 2009

// Rule metavariables: uppercase rule spec arguments
// Formula metavariables: A,B,C
// Bottom requirement: !

proper(NAME,PERSON,CLASS)
IF      ?ty(e)
THEN    put(+PERSON)
        put(+CLASS)
        make(\/1)
        go(\/1)
        put(ty(cn>e))
        put(fo(x^(iota, x)))
        go(/\)
        make(\/0)
        go(\/0)
        put(?ty(cn))
        make(\/0)
        go(\/0)
        put(ty(e))
        put(fo(VAR))
        go(/\)
        make(\/1)
        go(\/1)
        put(ty(e>cn))
        put(fo(y^y, NAME(y)))
		put(!)
ELSE    abort

det_quant(QUANT)
IF      ?ty(e)
THEN    make(\/1)
        go(\/1)
        put(fo(x^(QUANT, x)))
        put(ty(cn>e))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort


mass(NAME,PERSON,CLASS)
IF      ?ty(e)
THEN    put(ty(e))
        put(fo(NAME))
        put(+PERSON)
        put(+CLASS)
        put(!)
ELSE    abort

count(PRED,PERSON,CLASS)
IF      ?ty(cn)
THEN    make(\/0)
        go(\/0)
        put(fo(VAR))
        put(ty(e))      
        put(+PERSON)
        put(+CLASS)
        put(!)
        go(/\0)
        go(/\0)
        put(+CLASS)
        go(\/0)
        make(\/1)
        go(\/1)
        put(fo(x^x,PRED(x)))
        put(ty(e>cn))
        put(!)
        go(/\1)
        go(\/0)
ELSE    abort

adj(PRED)
IF      ?ty(cn)
THEN    make(\/1)
        go(\/1)
        put(fo(x^PRED(x)))
        put(ty(cn>cn))
        put(!)
        go(/\1)
        make(\/0)
        go(\/0)
        put(?ty(cn))
ELSE    abort

pron_nom(PERSON,CLASS)
IF      ?ty(e)
        [/\]?ty(t)
THEN    put(ty(e))
        //* put(fo(A)) // formula metavariables not working with generation *//
        put(?Ex.fo(x))
        put(+PERSON)
        put(+CLASS)
        put(!)
ELSE    abort

pron_acc(PERSON,CLASS)
IF      ?ty(e)
        [/\]?ty(e>X)
THEN    put(ty(e))
        //* put(fo(A)) // formula metavariables not working with generation *//
        put(?Ex.fo(x))
        put(+PERSON)
        put(+CLASS)
        put(!)
ELSE    abort

pron_ref(PERSON,CLASS)
IF		?ty(e)
		¬</\0>?ty(t)
		</\0/\*\/0>fo(X)
THEN	put(fo(X))
		put(ty(e))
		put(+PERSON)
		put(+CLASS)
		put(!)
ELSE	abort

pron_whrel(CLASS)
IF      ?ty(e)
        </\*/\L>fo(X)
THEN    put(ty(e))
        put(fo(X))
ELSE    abort

v_intran_inf(PRED,TENSE,PERSON)
IF      ty(es>t)
        ?Ex.fo(x)
        </\1>tn(Z)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x        
THEN    delete(ty(es>t))
		put(?ty(es>t))
		go(</\1\/U>)
		put(?</\0/\1>tn(Z))
		go(</\U\/0\/0\/1\/1>)
		conjoin(x^y^y, (y subset x))
		put(+inf_restrictor)
		go(</\1/\1/\0/\0\/1>)
		v_intran_content(PRED)
ELSE    abort

v_tran_inf(PRED,TENSE,PERSON)
IF      ty(es>t)
        ?Ex.fo(x)
        </\1>tn(Z)
        ¬<\/0>Ex.x
        ¬<\/1>Ex.x        
THEN    delete(ty(es>t))
		put(?ty(es>t))
		go(</\1\/U>)
		put(?</\0/\1>tn(Z))
		go(</\U\/0\/0\/1\/1>)
		conjoin(x^y^y, (y subset x))
		put(+inf_restrictor)
		go(</\1/\1/\0/\0\/1>)
		v_tran_content(PRED)
ELSE    abort

v_tran_fin(PRED,TENSE,PERSON)
IF		?ty(t)
		tn(X)
		<\/U>Ex.x
		¬<\/1>Ex.x
		¬<\/0>Ex.x
THEN	go(\/U)
		put(?</\0/\1>tn(X))
		go(/\U)
		make(\/0)
		go(\/0)
		put(?ty(es))
		build_event_term(TENSE)
		go(</\1/\1/\0/\0>)
		make(\/1)
		go(\/1)
		put(?ty(es>t))
		v_tran_content(PRED)
ELSE	abort		

v_intran_fin(PRED,TENSE,PERSON)
IF      ?ty(t)
		tn(X)
        <\/U>Ex.x
        ¬<\/1>Ex.x
		¬<\/0>Ex.x      
THEN    go(\/U)
		put(?</\0/\1>tn(X))
		go(/\U)
		make(\/0)
		go(\/0)
		put(?ty(es))
		build_event_term(TENSE)
		go(</\1/\1/\0/\0>)
		make(\/1)
		go(\/1)
		put(?ty(es>t))
		v_intran_content(PRED)
ELSE    abort

v_aux_inf(PRED,TENSE,PERSON)
IF		?ty(t)
		¬<\/1>Ex.x
		¬<\/0>Ex.x
		<\/U>Ex.x
THEN	aux_content(PRED)
ELSE	abort

v_aux_invertinf(PRED,TENSE,PERSON)
IF		?ty(t)
		¬<\/1>Ex.x
		¬<\/0>Ex.x
		¬<\/U>Ex.x
THEN	put(+Q)
		aux_content(PRED)
		go(/\1)
		make(\/U)
		go(\/U)
		put(?ty(e))
		put(?Ex.tn(x))
ELSE	abort


