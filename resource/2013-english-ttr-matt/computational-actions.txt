// Computational actions for English
// Matt version with no event nodes & TTR 2013

// Rules prefixed with * are non-optional
// Rules prefixed with + are applied repeatedly, exhausting all successful Rule Metavariable combinations
// If a Rule is both non-optional and is to be exhaustively applied, 
// then the + should be preceded by the *, i.e. the name should be prefixed by "*+".
// Rule metavariables: X,Y,Z
// Formula metavariables: A,B,C

intro-pred
IF      ?ty(t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
THEN    make(\/0)
        go(\/0)
        put(?ty(e))
        go(/\0)
        make(\/1)
        go(\/1)
        put(?ty(e>t))
        go(/\1)
        go(\/0)
ELSE    abort

anticipation0
IF      <\/0>Ex.?x
THEN    go(\/0)
ELSE    abort

anticipation1
IF      <\/1>Ex.?x
THEN    go(\/1)
ELSE    abort

*thinning
IF      ?X
        X
THEN    delete(?X)
ELSE    abort


completion
IF      ty(X)
		¬?ty(X)
        </\>Ex.x
THEN    go(/\)
ELSE    abort

*elimination
IF      ?ty(X)
        ¬Ex.fo(x)
        <\/1>ty(Y>X)
        <\/0>ty(Y)
        <\/1>Ex.fo(x)
        <\/0>Ex.fo(x)
        ¬<\/1>Ex.?x
        ¬<\/0>Ex.?x
THEN    beta-reduce
ELSE    abort

star-adjunction
IF      ?ty(t)
        ¬<\/1>Ex.x
        ¬<\/0>Ex.x
        ¬<\/*>Ex.x
        ¬<\/U>Ex.x
THEN    make(\/*)
        go(\/*)
        put(?ty(e))
        put(?Ex.tn(x))
ELSE    abort

//*
local-star-adjunction
IF		?ty(t)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		¬<\/U>Ex.x
THEN	make(\/U)
		go(\/U)
		put(?ty(e))
		put(?Ex.tn(x))	
ELSE	abort
*//


merge
IF      Ex.tn(x)
		¬<\/1>Ex.x
        ¬<\/0>Ex.x
		<Y>?Ex.tn(x)
		subsumes(Y)
		?ty(V)		
		<Y>ty(V)		           
THEN    merge(Y)
		delete(?ty(V))
		delete(?Ex.tn(x))	
		go(/\)		
ELSE    abort


link-adjunction
IF      ty(e)
        fo(X)
        ¬<\/L>Ex.x
THEN    make(\/L)
        go(\/L)
        put(?ty(t))
        put(?<\/*>fo(X))
ELSE    abort


*link-evaluation
IF      ¬+evaluated
		Ex.fo(x)
		<\/L>Ex.x
		<\/L>fo(X)
THEN    conjoin(X)
		put(+evaluated)
ELSE    abort

//*

*enable-evaluation
IF		ty(t)
		+local-root
		¬Ex.?x
		<\/L>Ex.x
THEN	goDeepestLink
		delete(?+eval)
ELSE	abort



local-substitution
IF      ty(X) //this will only work for pronouns. 
        ?Ex.fo(x)
        class(V)
        person(W)
        <Y>ty(X)
        <Y>fo(Z) 
        <Y>class(V)
        <Y>person(W)
        ¬</\0/\*\/0>fo(Z)      
THEN    put(fo(Z))
ELSE    abort


+context-substitution-pron
IF		ty(e)
		person(X)
		class(Z)
		?Ex.fo(x)
		context_tree(ty(e)& person(X)& class(Z)& fo(Y))	
THEN	put(fo(Y))
ELSE	abort

context-substitution-other
IF		¬ty(e)
		ty(X)
		?Ex.fo(x)
		context_tree(ty(X)& fo(Y))
		//</\C\/0\/0\/1\/1>fo(Z)
THEN	put(fo(Y))
		//go(up and down)
		//put(fo(Z))
ELSE	abort

regeneration
IF		ty(X)
		?Ex.fo(x)
		triggered_by(Y, ty(X))
THEN	do(Y)
ELSE	abort
*//
