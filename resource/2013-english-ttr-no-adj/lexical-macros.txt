//WARNING: MUST use brackets with all infix operators, and space between operator and arguments compulsory 
// e.g. (x & y)  (x overlap y) (z < x) etc...

	
event_restrictor(past)
	conjoin([p1==(reftime < now):t])

event_restrictor(pres)
	conjoin([p1==(reftime = now):t])

event_restrictor(future)
	conjoin([p1==(now < reftime):t|p2==(head = reftime):t])

v_intran_content(PRED)
	ttrput(R1^R2^(R2 ++ (R1 ++ [p1==PRED(R2.head):t|p2==subj(R2.head, R1.head):t|head:R2.head])))
	put(!)

v_tran_content(PRED)
	go(\/1)
	make(\/1)
	go(\/1)
	ttrput(R1^R2^R3^(R3 ++ (R2 ++ (R1 ++ [p==PRED(R3.head):t|p2==subj(R3.head, R2.head):t|p3==obj(R3.head, R1.head):t|head:R3.head]))))
	put(ty(e>(e>(es>t))))
	put(!)
	go(/\1)
	make(\/0)
	go(\/0)
	put(?ty(e))

aux_content(will)
		make(\/0)
		go(\/0)
		put(?ty(es))
		make(\/1)
		go(\/1)
		put(ty(cn>es))
		ttrput(R^[r:R|e1==(eps, r.head, r):es|head:e1])
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		ttrput([e1:es|reftime:es|head:e1])
		event_restrictor(future)
		go(/\0)
		go(/\0)
		make(\/1)
		go(\/1)
		put(?ty(es>t))
		make(\/0)
		go(\/0)
		put(?ty(e))
		go(/\0)
		make(\/1)
		go(\/1)
		put(ty(e>(es>t)))
		put(?Ex.fo(x))

aux_content(did)
		make(\/0)
		go(\/0)
		put(?ty(es))
		make(\/1)
		go(\/1)
		put(ty(cn>es))
		ttrput(R^[r:R|e1==(eps, r.head, r):es|head:e1])
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		ttrput([e1:es|reftime:es|head:e1])
		event_restrictor(past)
		go(/\0)
		go(/\0)
		make(\/1)
		go(\/1)
		put(?ty(es>t))
		make(\/0)
		go(\/0)
		put(?ty(e))
		go(/\0)
		make(\/1)
		go(\/1)
		put(ty(e>(es>t)))
		put(?Ex.fo(x))
	
aux_content(do)
		make(\/0)
		go(\/0)
		put(?ty(es))
		make(\/1)
		go(\/1)
		put(ty(cn>es))
		ttrput(R^[r:R|e1==(eps, r.head, r):es|head:e1])
		go(/\1)
		make(\/0)
		go(\/0)
		put(?ty(cn))
		ttrput([e1:es|reftime:es|head:e1])
		event_restrictor(pres)
		go(/\0)
		go(/\0)
		make(\/1)
		go(\/1)
		put(?ty(es>t))
		make(\/0)
		go(\/0)
		put(?ty(e))
		go(/\0)
		make(\/1)
		go(\/1)
		put(ty(e>(es>t)))
		put(?Ex.fo(x))
